/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
package br.com.seimos.minijava.parser;

import br.com.seimos.minijava.syntaxtree.*;
import java.util.Vector;


@SuppressWarnings("all")
public class MiniJavaParser implements MiniJavaParserConstants {

  final public Program Program() throws ParseException {
   MainClass n0;
   ClassDeclarationList n1;
   NodeToken n2;
   Token n3;
    n0 = MainClass();
    n1 = ClassDeclarationList();
    n3 = jj_consume_token(0);
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new Program(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  final public MainClass MainClass() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
                     n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LBRACE);
                 n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(PUBLIC);
                 n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(STATIC);
                 n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(VOID);
                n10 = JTBToolkit.makeNodeToken(n11);
    n13 = jj_consume_token(MAIN);
                n12 = JTBToolkit.makeNodeToken(n13);
    n15 = jj_consume_token(LPAREN);
                  n14 = JTBToolkit.makeNodeToken(n15);
    n17 = jj_consume_token(STRING);
                  n16 = JTBToolkit.makeNodeToken(n17);
    n19 = jj_consume_token(LBRACKET);
                    n18 = JTBToolkit.makeNodeToken(n19);
    n21 = jj_consume_token(RBRACKET);
                    n20 = JTBToolkit.makeNodeToken(n21);
    n23 = jj_consume_token(IDENTIFIER);
                      n22 = JTBToolkit.makeNodeToken(n23);
    n25 = jj_consume_token(RPAREN);
                  n24 = JTBToolkit.makeNodeToken(n25);
    n27 = jj_consume_token(LBRACE);
                  n26 = JTBToolkit.makeNodeToken(n27);
    n28 = Statement();
    n30 = jj_consume_token(RBRACE);
                  n29 = JTBToolkit.makeNodeToken(n30);
    n32 = jj_consume_token(RBRACE);
                  n31 = JTBToolkit.makeNodeToken(n32);
     {if (true) return new MainClass(n0,n2,n4,n6,n8,n10,n12,n14,n16,n18,n20,n22,n24,n26,n28,n29,n31);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclaration ClassDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   VarDeclarationList n12;
   MethodDeclarationList n13;
   NodeToken n14;
   Token n15;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
                     n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(EXTENDS);
                     n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n9 = jj_consume_token(IDENTIFIER);
                        n8 = JTBToolkit.makeNodeToken(n9);
        n5.addNode(n8);
        n4.addNode(n5);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    n11 = jj_consume_token(LBRACE);
                  n10 = JTBToolkit.makeNodeToken(n11);
    n12 = VarDeclarationList();
    n13 = MethodDeclarationList();
    n15 = jj_consume_token(RBRACE);
                  n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new ClassDeclaration(n0,n2,n4,n10,n12,n13,n14);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclarationList ClassDeclarationList() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   ClassDeclaration n2;
   ClassDeclarationList n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
        n1 = new NodeSequence(2);
      n2 = ClassDeclaration();
        n1.addNode(n2);
      n3 = ClassDeclarationList();
        n1.addNode(n3);
        n0.addNode(n1);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
     {if (true) return new ClassDeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StatementList StatementList() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Statement n2;
   StatementList n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
    case IF:
    case WHILE:
    case SYSO:
    case IDENTIFIER:
        n1 = new NodeSequence(2);
      n2 = Statement();
        n1.addNode(n2);
      n3 = StatementList();
        n1.addNode(n3);
        n0.addNode(n1);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
     {if (true) return new StatementList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   StatementList n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeToken n13;
   Token n14;
   Statement n15;
   NodeToken n16;
   Token n17;
   Statement n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   Expression n24;
   NodeToken n25;
   Token n26;
   Statement n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   Expression n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeSequence n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   Expression n43;
   NodeToken n44;
   Token n45;
   NodeSequence n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   Expression n51;
   NodeToken n52;
   Token n53;
   NodeToken n54;
   Token n55;
   Expression n56;
   NodeToken n57;
   Token n58;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(LBRACE);
                    n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = StatementList();
        n1.addNode(n4);
      n6 = jj_consume_token(RBRACE);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
      break;
    case IF:
        n7 = new NodeSequence(7);
      n9 = jj_consume_token(IF);
                n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n11 = jj_consume_token(LPAREN);
                     n10 = JTBToolkit.makeNodeToken(n11);
        n7.addNode(n10);
      n12 = Expression();
        n7.addNode(n12);
      n14 = jj_consume_token(RPAREN);
                     n13 = JTBToolkit.makeNodeToken(n14);
        n7.addNode(n13);
      n15 = Statement();
        n7.addNode(n15);
      n17 = jj_consume_token(ELSE);
                   n16 = JTBToolkit.makeNodeToken(n17);
        n7.addNode(n16);
      n18 = Statement();
        n7.addNode(n18);
        n0 = new NodeChoice(n7, 1);
      break;
    case WHILE:
        n19 = new NodeSequence(5);
      n21 = jj_consume_token(WHILE);
                    n20 = JTBToolkit.makeNodeToken(n21);
        n19.addNode(n20);
      n23 = jj_consume_token(LPAREN);
                     n22 = JTBToolkit.makeNodeToken(n23);
        n19.addNode(n22);
      n24 = Expression();
        n19.addNode(n24);
      n26 = jj_consume_token(RPAREN);
                     n25 = JTBToolkit.makeNodeToken(n26);
        n19.addNode(n25);
      n27 = Statement();
        n19.addNode(n27);
        n0 = new NodeChoice(n19, 2);
      break;
    case SYSO:
        n28 = new NodeSequence(5);
      n30 = jj_consume_token(SYSO);
                   n29 = JTBToolkit.makeNodeToken(n30);
        n28.addNode(n29);
      n32 = jj_consume_token(LPAREN);
                     n31 = JTBToolkit.makeNodeToken(n32);
        n28.addNode(n31);
      n33 = Expression();
        n28.addNode(n33);
      n35 = jj_consume_token(RPAREN);
                     n34 = JTBToolkit.makeNodeToken(n35);
        n28.addNode(n34);
      n37 = jj_consume_token(SEMICOLON);
                        n36 = JTBToolkit.makeNodeToken(n37);
        n28.addNode(n36);
        n0 = new NodeChoice(n28, 3);
      break;
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_1(2)) {
        n38 = new NodeSequence(5);
        n40 = jj_consume_token(IDENTIFIER);
                         n39 = JTBToolkit.makeNodeToken(n40);
        n38.addNode(n39);
        n42 = jj_consume_token(EQUALS);
                     n41 = JTBToolkit.makeNodeToken(n42);
        n38.addNode(n41);
        n43 = Expression();
        n38.addNode(n43);
        n45 = jj_consume_token(SEMICOLON);
                        n44 = JTBToolkit.makeNodeToken(n45);
        n38.addNode(n44);
        n0 = new NodeChoice(n38, 4);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        n46 = new NodeSequence(7);
          n48 = jj_consume_token(IDENTIFIER);
                         n47 = JTBToolkit.makeNodeToken(n48);
        n46.addNode(n47);
          n50 = jj_consume_token(LBRACKET);
                       n49 = JTBToolkit.makeNodeToken(n50);
        n46.addNode(n49);
          n51 = Expression();
        n46.addNode(n51);
          n53 = jj_consume_token(RBRACKET);
                       n52 = JTBToolkit.makeNodeToken(n53);
        n46.addNode(n52);
          n55 = jj_consume_token(EQUALS);
                     n54 = JTBToolkit.makeNodeToken(n55);
        n46.addNode(n54);
          n56 = Expression();
        n46.addNode(n56);
          n58 = jj_consume_token(SEMICOLON);
                        n57 = JTBToolkit.makeNodeToken(n58);
        n46.addNode(n57);
        n0 = new NodeChoice(n46, 5);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public VarDeclaration VarDeclaration() throws ParseException {
   Type n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    n0 = Type();
    n2 = jj_consume_token(IDENTIFIER);
                     n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(SEMICOLON);
                    n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new VarDeclaration(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public VarDeclarationList VarDeclarationList() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   VarDeclaration n2;
   VarDeclarationList n3;
    if (jj_2_2(2)) {
        n1 = new NodeSequence(2);
      n2 = VarDeclaration();
        n1.addNode(n2);
      n3 = VarDeclarationList();
        n1.addNode(n3);
        n0.addNode(n1);
    } else {
      ;
    }
     {if (true) return new VarDeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   FormalList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   VarDeclarationList n12;
   StatementList n13;
   NodeToken n14;
   Token n15;
   Expression n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n4 = jj_consume_token(IDENTIFIER);
                     n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
                 n5 = JTBToolkit.makeNodeToken(n6);
    n7 = FormalList();
    n9 = jj_consume_token(RPAREN);
                 n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(LBRACE);
                  n10 = JTBToolkit.makeNodeToken(n11);
    n12 = VarDeclarationList();
    n13 = StatementList();
    n15 = jj_consume_token(RETURN);
                  n14 = JTBToolkit.makeNodeToken(n15);
    n16 = Expression();
    n18 = jj_consume_token(SEMICOLON);
                     n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(RBRACE);
                  n19 = JTBToolkit.makeNodeToken(n20);
     {if (true) return new MethodDeclaration(n0,n2,n3,n5,n7,n8,n10,n12,n13,n14,n16,n17,n19);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclarationList MethodDeclarationList() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   MethodDeclaration n2;
   MethodDeclarationList n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
        n1 = new NodeSequence(2);
      n2 = MethodDeclaration();
        n1.addNode(n2);
      n3 = MethodDeclarationList();
        n1.addNode(n3);
        n0.addNode(n1);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
     {if (true) return new MethodDeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
   NodeChoice n0;
   AndExpression n1;
   LessThanExpression n2;
   PlusExpression n3;
   MinusExpression n4;
   TimesExpression n5;
   ArrayLookupExpression n6;
   ArrayLengthExpression n7;
   MethodCallExpression n8;
   PrimaryExpression n9;
    if (jj_2_3(2147483647)) {
      n1 = AndExpression();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_4(2147483647)) {
      n2 = LessThanExpression();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_5(2147483647)) {
      n3 = PlusExpression();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_6(2147483647)) {
      n4 = MinusExpression();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_7(2147483647)) {
      n5 = TimesExpression();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_8(2147483647)) {
      n6 = ArrayLookupExpression();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_9(2147483647)) {
      n7 = ArrayLengthExpression();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_10(2147483647)) {
      n8 = MethodCallExpression();
        n0 = new NodeChoice(n8, 7);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case TRUE:
      case FALSE:
      case THIS:
      case NEW:
      case NOT:
      case INTEGER_LITERAL:
      case IDENTIFIER:
        n9 = PrimaryExpression();
        n0 = new NodeChoice(n9, 8);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   Expression n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   Expression n33;
   NodeSequence n34;
   NodeToken n35;
   Token n36;
   Expression n37;
   NodeToken n38;
   Token n39;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
                             n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case TRUE:
      n4 = jj_consume_token(TRUE);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case FALSE:
      n6 = jj_consume_token(FALSE);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case IDENTIFIER:
      n8 = jj_consume_token(IDENTIFIER);
                        n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case THIS:
      n10 = jj_consume_token(THIS);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_11(2)) {
        n11 = new NodeSequence(6);
        n13 = jj_consume_token(NEW);
                  n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
        n15 = jj_consume_token(INTEGER);
                      n14 = JTBToolkit.makeNodeToken(n15);
        n11.addNode(n14);
        n17 = jj_consume_token(LBRACKET);
                       n16 = JTBToolkit.makeNodeToken(n17);
        n11.addNode(n16);
        n18 = Expression();
        n11.addNode(n18);
        n20 = jj_consume_token(RBRACKET);
                       n19 = JTBToolkit.makeNodeToken(n20);
        n11.addNode(n19);
        n0 = new NodeChoice(n11, 5);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        n21 = new NodeSequence(4);
          n23 = jj_consume_token(NEW);
                  n22 = JTBToolkit.makeNodeToken(n23);
        n21.addNode(n22);
          n25 = jj_consume_token(IDENTIFIER);
                         n24 = JTBToolkit.makeNodeToken(n25);
        n21.addNode(n24);
          n27 = jj_consume_token(LPAREN);
                     n26 = JTBToolkit.makeNodeToken(n27);
        n21.addNode(n26);
          n29 = jj_consume_token(RPAREN);
                     n28 = JTBToolkit.makeNodeToken(n29);
        n21.addNode(n28);
        n0 = new NodeChoice(n21, 6);
          break;
        case NOT:
        n30 = new NodeSequence(2);
          n32 = jj_consume_token(NOT);
                  n31 = JTBToolkit.makeNodeToken(n32);
        n30.addNode(n31);
          n33 = Expression();
        n30.addNode(n33);
        n0 = new NodeChoice(n30, 7);
          break;
        case LPAREN:
        n34 = new NodeSequence(3);
          n36 = jj_consume_token(LPAREN);
                     n35 = JTBToolkit.makeNodeToken(n36);
        n34.addNode(n35);
          n37 = Expression();
        n34.addNode(n37);
          n39 = jj_consume_token(RPAREN);
                     n38 = JTBToolkit.makeNodeToken(n39);
        n34.addNode(n38);
        n0 = new NodeChoice(n34, 8);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList ExpressionList() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Expression n2;
   ExpressionRestList n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case NOT:
    case INTEGER_LITERAL:
    case IDENTIFIER:
        n1 = new NodeSequence(2);
      n2 = Expression();
        n1.addNode(n2);
      n3 = ExpressionRestList();
        n1.addNode(n3);
        n0.addNode(n1);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
     {if (true) return new ExpressionList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
    if (jj_2_12(2)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(INTEGER);
                     n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(LBRACKET);
                      n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(RBRACKET);
                      n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        n9 = jj_consume_token(BOOLEAN);
                     n8 = JTBToolkit.makeNodeToken(n9);
        n0 = new NodeChoice(n8, 1);
        break;
      case INTEGER:
        n11 = jj_consume_token(INTEGER);
                      n10 = JTBToolkit.makeNodeToken(n11);
        n0 = new NodeChoice(n10, 2);
        break;
      case IDENTIFIER:
        n13 = jj_consume_token(IDENTIFIER);
                         n12 = JTBToolkit.makeNodeToken(n13);
        n0 = new NodeChoice(n12, 3);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FormalList FormalList() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Type n2;
   NodeToken n3;
   Token n4;
   FormalRestList n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case IDENTIFIER:
        n1 = new NodeSequence(3);
      n2 = Type();
        n1.addNode(n2);
      n4 = jj_consume_token(IDENTIFIER);
                        n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
      n5 = FormalRestList();
        n1.addNode(n5);
        n0.addNode(n1);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
     {if (true) return new FormalList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FormalRest FormalRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(COMMA);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n4 = jj_consume_token(IDENTIFIER);
                     n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new FormalRest(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public FormalRestList FormalRestList() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   FormalRest n2;
   FormalRestList n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
        n1 = new NodeSequence(2);
      n2 = FormalRest();
        n1.addNode(n2);
      n3 = FormalRestList();
        n1.addNode(n3);
        n0.addNode(n1);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
     {if (true) return new FormalRestList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionRest ExpressionRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
    n1 = jj_consume_token(COMMA);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
     {if (true) return new ExpressionRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionRestList ExpressionRestList() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   ExpressionRest n2;
   ExpressionRestList n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
        n1 = new NodeSequence(2);
      n2 = ExpressionRest();
        n1.addNode(n2);
      n3 = ExpressionRestList();
        n1.addNode(n3);
        n0.addNode(n1);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
     {if (true) return new ExpressionRestList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AndExpression AndExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(AND);
              n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new AndExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public LessThanExpression LessThanExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(LT);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new LessThanExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public PlusExpression PlusExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(PLUS);
               n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new PlusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public MinusExpression MinusExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(MINUS);
                n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new MinusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public TimesExpression TimesExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(TIMES);
                n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new TimesExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayLookupExpression ArrayLookupExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(LBRACKET);
                   n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
    n5 = jj_consume_token(RBRACKET);
                   n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ArrayLookupExpression(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayLengthExpression ArrayLengthExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(DOT);
              n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(LENGTH);
                 n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ArrayLengthExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public MethodCallExpression MethodCallExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   ExpressionList n7;
   NodeToken n8;
   Token n9;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(DOT);
              n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(IDENTIFIER);
                     n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
                 n5 = JTBToolkit.makeNodeToken(n6);
    n7 = ExpressionList();
    n9 = jj_consume_token(RPAREN);
                 n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new MethodCallExpression(n0,n1,n3,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3_7() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_37()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_1() {
    if (jj_3R_3()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_15()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_32()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MiniJavaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200000,0x200,0x68000400,0x68000400,0x0,0x800,0x40000,0x0,0x40000,0x40000,0x6000000,0x6000000,0x1000000,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x2000,0x0,0x2000,0x0,0x3f80,0x3380,0xc00,0x3f80,0x2000,0x2000,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
