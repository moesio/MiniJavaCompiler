options{  JDK_VERSION = "1.6";  STATIC = false;}PARSER_BEGIN(MiniJavaParser)package br.com.seimos.minijava.parser;//import br.ufc.minijavaufc.ast.*;public class MiniJavaParser{}PARSER_END(MiniJavaParser)SKIP : /* WHITE SPACE */{  " "| "\t"| "\n"| "\r"| "\f"}SPECIAL_TOKEN : /* COMMENTS */{  < SINGLE_LINE_COMMENT :    "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < FORMAL_COMMENT :    "/**" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >| < MULTI_LINE_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >}TOKEN :{  < CLASS : "class" >| < LBRACE : "{" >| < PUBLIC : "public" >| < STATIC : "static" >| < VOID : "void" >| < MAIN : "main" >| < STRING : "String" >| < LBRACKET : "[" >| < RBRACKET : "]" >| < LPAREN : "(" >| < RPAREN : ")" >| < RBRACE : "}" >| < EXTENDS : "extends" >| < SEMICOLON : ";" >| < RETURN : "return" >| < COMMA : "," >| < INTEGER : "int" >| < BOOLEAN : "boolean" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < SYSO : "System.out.println" >| < AND : "&&" >| < LT : "<" >| < PLUS : "+" >| < MINUS : "-" >| < TIMES : "*" >| < EQUALS : "=" >| < DOT : "." >| < LENGTH : "length" >| < TRUE : "true" >| < FALSE : "false" >| < THIS : "this" >| < NEW : "new" >| < NOT : "!" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    (      [ "1"-"9" ] ([ "0"-"9" ])*    | "0"    ) >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "a"-"z", "A"-"Z", "_" ] >| < #DIGIT : [ "0"-"9" ] >}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////void Program() :{}{  MainClass() ClassDeclarationList() < EOF >}void MainClass() :{}{  < CLASS > < IDENTIFIER > < LBRACE > < PUBLIC > < STATIC > < VOID > < MAIN > < LPAREN > < STRING > < LBRACKET > < RBRACKET > < IDENTIFIER > < RPAREN > < LBRACE > Statement() < RBRACE > < RBRACE >}void ClassDeclaration() :{}{  < CLASS > < IDENTIFIER > (< EXTENDS > < IDENTIFIER >)? < LBRACE > VarDeclarationList() MethodDeclarationList() < RBRACE >}void ClassDeclarationList() :{}{  [ ClassDeclaration() ClassDeclarationList() ]}void StatementList() :{}{  [ Statement() StatementList() ]}void Statement() :{}{  < LBRACE > StatementList() < RBRACE >| < IF > < LPAREN > Expression() < RPAREN > Statement() < ELSE > Statement()| < WHILE > < LPAREN > Expression() < RPAREN > Statement()| < SYSO > < LPAREN > Expression() < RPAREN > < SEMICOLON >| LOOKAHEAD(2)  < IDENTIFIER > < EQUALS > Expression() < SEMICOLON >| < IDENTIFIER > < LBRACKET > Expression() < RBRACKET > < EQUALS > Expression() < SEMICOLON >}void VarDeclaration() :{}{  Type() < IDENTIFIER > < SEMICOLON >}void VarDeclarationList() :{}{  [    LOOKAHEAD(2)    VarDeclaration() VarDeclarationList()  ]}void MethodDeclaration() :{}{  < PUBLIC > Type() < IDENTIFIER > < LPAREN > FormalList() < RPAREN > < LBRACE > VarDeclarationList() StatementList() < RETURN > Expression() < SEMICOLON > < RBRACE >}void MethodDeclarationList() :{}{  [ MethodDeclaration() MethodDeclarationList() ]}void Expression() :{}{  LOOKAHEAD(PrimaryExpression() < AND >)  AndExpression()| LOOKAHEAD(PrimaryExpression() < LT >)  LessThanExpression()| LOOKAHEAD(PrimaryExpression() < PLUS >)  PlusExpression()| LOOKAHEAD(PrimaryExpression() < MINUS >)  MinusExpression()| LOOKAHEAD(PrimaryExpression() < TIMES >)  TimesExpression()| LOOKAHEAD(PrimaryExpression() < LBRACKET >)  ArrayLookupExpression()| LOOKAHEAD(PrimaryExpression() < DOT > < LENGTH >)  ArrayLengthExpression()| LOOKAHEAD(PrimaryExpression() < DOT > < IDENTIFIER > < LPAREN >)  MethodCallExpression()| PrimaryExpression()}void PrimaryExpression() :{}{  < INTEGER_LITERAL >| < TRUE >| < FALSE >| < IDENTIFIER >| < THIS >| LOOKAHEAD(2)  < NEW > < INTEGER > < LBRACKET > Expression() < RBRACKET >| < NEW > < IDENTIFIER > < LPAREN > < RPAREN >| < NOT > Expression()| < LPAREN > Expression() < RPAREN >}void ExpressionList() :{}{  [ Expression() ExpressionRestList() ]}void Type() :{}{  LOOKAHEAD(2)  < INTEGER > < LBRACKET > < RBRACKET >| < BOOLEAN >| < INTEGER >| < IDENTIFIER >}void FormalList() :{}{  [ Type() < IDENTIFIER > FormalRestList() ]}void FormalRest() :{}{  < COMMA > Type() < IDENTIFIER >}void FormalRestList() :{}{  [ FormalRest() FormalRestList() ]}void ExpressionRest() :{}{  < COMMA > Expression()}void ExpressionRestList() :{}{  [ ExpressionRest() ExpressionRestList() ]}void AndExpression() :{}{  PrimaryExpression() < AND > PrimaryExpression()}void LessThanExpression() :{}{  PrimaryExpression() < LT > PrimaryExpression()}void PlusExpression() :{}{  PrimaryExpression() < PLUS > PrimaryExpression()}void MinusExpression() :{}{  PrimaryExpression() < MINUS > PrimaryExpression()}void TimesExpression() :{}{  PrimaryExpression() < TIMES > PrimaryExpression()}void ArrayLookupExpression() :{}{  PrimaryExpression() < LBRACKET > Expression() < RBRACKET >}void ArrayLengthExpression() :{}{  PrimaryExpression() < DOT > < LENGTH >}void MethodCallExpression() :{}{  PrimaryExpression() < DOT > < IDENTIFIER > < LPAREN > ExpressionList() < RPAREN >}