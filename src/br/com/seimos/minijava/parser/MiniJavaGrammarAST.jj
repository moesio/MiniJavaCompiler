//
// Generated by JTB 1.3.2
//

options {
   JDK_VERSION = "1.6";
   STATIC = false;
}

PARSER_BEGIN(MiniJavaParser)
package br.com.seimos.minijava.parser;

import br.com.seimos.minijava.syntaxtree.*;
import java.util.Vector;


public class MiniJavaParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MiniJavaParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <CLASS: "class">
   | <LBRACE: "{">
   | <PUBLIC: "public">
   | <STATIC: "static">
   | <VOID: "void">
   | <MAIN: "main">
   | <STRING: "String">
   | <LBRACKET: "[">
   | <RBRACKET: "]">
   | <LPAREN: "(">
   | <RPAREN: ")">
   | <RBRACE: "}">
   | <EXTENDS: "extends">
   | <SEMICOLON: ";">
   | <RETURN: "return">
   | <COMMA: ",">
   | <INTEGER: "int">
   | <BOOLEAN: "boolean">
   | <IF: "if">
   | <ELSE: "else">
   | <WHILE: "while">
   | <SYSO: "System.out.println">
   | <AND: "&&">
   | <LT: "<">
   | <PLUS: "+">
   | <MINUS: "-">
   | <TIMES: "*">
   | <EQUALS: "=">
   | <DOT: ".">
   | <LENGTH: "length">
   | <TRUE: "true">
   | <FALSE: "false">
   | <THIS: "this">
   | <NEW: "new">
   | <NOT: "!">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["a"-"z", "A"-"Z", "_"]>
   | <#DIGIT: ["0"-"9"]>
}

Program Program() :
{
   MainClass n0;
   ClassDeclarationList n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=MainClass()
   n1=ClassDeclarationList()
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new Program(n0,n1,n2); }
}

MainClass MainClass() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Statement n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;

   
}
{
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<LBRACE> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<PUBLIC> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=<STATIC> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<VOID> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=<MAIN> { n12 = JTBToolkit.makeNodeToken(n13); }
   n15=<LPAREN> { n14 = JTBToolkit.makeNodeToken(n15); }
   n17=<STRING> { n16 = JTBToolkit.makeNodeToken(n17); }
   n19=<LBRACKET> { n18 = JTBToolkit.makeNodeToken(n19); }
   n21=<RBRACKET> { n20 = JTBToolkit.makeNodeToken(n21); }
   n23=<IDENTIFIER> { n22 = JTBToolkit.makeNodeToken(n23); }
   n25=<RPAREN> { n24 = JTBToolkit.makeNodeToken(n25); }
   n27=<LBRACE> { n26 = JTBToolkit.makeNodeToken(n27); }
   n28=Statement()
   n30=<RBRACE> { n29 = JTBToolkit.makeNodeToken(n30); }
   n32=<RBRACE> { n31 = JTBToolkit.makeNodeToken(n32); }
   
   { return new MainClass(n0,n2,n4,n6,n8,n10,n12,n14,n16,n18,n20,n22,n24,n26,n28,n29,n31); }
}

ClassDeclaration ClassDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   VarDeclarationList n12;
   MethodDeclarationList n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7=<EXTENDS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<IDENTIFIER> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   n11=<LBRACE> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=VarDeclarationList()
   n13=MethodDeclarationList()
   n15=<RBRACE> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new ClassDeclaration(n0,n2,n4,n10,n12,n13,n14); }
}

ClassDeclarationList ClassDeclarationList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   ClassDeclaration n2;
   ClassDeclarationList n3;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=ClassDeclaration()
      { n1.addNode(n2); }
      n3=ClassDeclarationList()
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   
   { return new ClassDeclarationList(n0); }
}

StatementList StatementList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Statement n2;
   StatementList n3;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=Statement()
      { n1.addNode(n2); }
      n3=StatementList()
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   
   { return new StatementList(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   StatementList n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeToken n13;
   Token n14;
   Statement n15;
   NodeToken n16;
   Token n17;
   Statement n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   Expression n24;
   NodeToken n25;
   Token n26;
   Statement n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   Expression n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeSequence n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   Expression n43;
   NodeToken n44;
   Token n45;
   NodeSequence n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   Expression n51;
   NodeToken n52;
   Token n53;
   NodeToken n54;
   Token n55;
   Expression n56;
   NodeToken n57;
   Token n58;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<LBRACE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=StatementList()
      { n1.addNode(n4); }
      n6=<RBRACE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n7 = new NodeSequence(7); }
      n9=<IF> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n11=<LPAREN> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n7.addNode(n10); }
      n12=Expression()
      { n7.addNode(n12); }
      n14=<RPAREN> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n7.addNode(n13); }
      n15=Statement()
      { n7.addNode(n15); }
      n17=<ELSE> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n7.addNode(n16); }
      n18=Statement()
      { n7.addNode(n18); }
      { n0 = new NodeChoice(n7, 1); }
   |
      { n19 = new NodeSequence(5); }
      n21=<WHILE> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n19.addNode(n20); }
      n23=<LPAREN> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n19.addNode(n22); }
      n24=Expression()
      { n19.addNode(n24); }
      n26=<RPAREN> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n19.addNode(n25); }
      n27=Statement()
      { n19.addNode(n27); }
      { n0 = new NodeChoice(n19, 2); }
   |
      { n28 = new NodeSequence(5); }
      n30=<SYSO> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n28.addNode(n29); }
      n32=<LPAREN> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n28.addNode(n31); }
      n33=Expression()
      { n28.addNode(n33); }
      n35=<RPAREN> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n28.addNode(n34); }
      n37=<SEMICOLON> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n28.addNode(n36); }
      { n0 = new NodeChoice(n28, 3); }
   |
      LOOKAHEAD(2)
      { n38 = new NodeSequence(5); }
      n40=<IDENTIFIER> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n38.addNode(n39); }
      n42=<EQUALS> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n38.addNode(n41); }
      n43=Expression()
      { n38.addNode(n43); }
      n45=<SEMICOLON> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n38.addNode(n44); }
      { n0 = new NodeChoice(n38, 4); }
   |
      { n46 = new NodeSequence(7); }
      n48=<IDENTIFIER> { n47 = JTBToolkit.makeNodeToken(n48); }
      { n46.addNode(n47); }
      n50=<LBRACKET> { n49 = JTBToolkit.makeNodeToken(n50); }
      { n46.addNode(n49); }
      n51=Expression()
      { n46.addNode(n51); }
      n53=<RBRACKET> { n52 = JTBToolkit.makeNodeToken(n53); }
      { n46.addNode(n52); }
      n55=<EQUALS> { n54 = JTBToolkit.makeNodeToken(n55); }
      { n46.addNode(n54); }
      n56=Expression()
      { n46.addNode(n56); }
      n58=<SEMICOLON> { n57 = JTBToolkit.makeNodeToken(n58); }
      { n46.addNode(n57); }
      { n0 = new NodeChoice(n46, 5); }
   )
   
   { return new Statement(n0); }
}

VarDeclaration VarDeclaration() :
{
   Type n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=Type()
   n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<SEMICOLON> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new VarDeclaration(n0,n1,n3); }
}

VarDeclarationList VarDeclarationList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   VarDeclaration n2;
   VarDeclarationList n3;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(2); }
      n2=VarDeclaration()
      { n1.addNode(n2); }
      n3=VarDeclarationList()
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   
   { return new VarDeclarationList(n0); }
}

MethodDeclaration MethodDeclaration() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   FormalList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   VarDeclarationList n12;
   StatementList n13;
   NodeToken n14;
   Token n15;
   Expression n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;

   
}
{
   n1=<PUBLIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<LPAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=FormalList()
   n9=<RPAREN> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<LBRACE> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=VarDeclarationList()
   n13=StatementList()
   n15=<RETURN> { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Expression()
   n18=<SEMICOLON> { n17 = JTBToolkit.makeNodeToken(n18); }
   n20=<RBRACE> { n19 = JTBToolkit.makeNodeToken(n20); }
   
   { return new MethodDeclaration(n0,n2,n3,n5,n7,n8,n10,n12,n13,n14,n16,n17,n19); }
}

MethodDeclarationList MethodDeclarationList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   MethodDeclaration n2;
   MethodDeclarationList n3;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=MethodDeclaration()
      { n1.addNode(n2); }
      n3=MethodDeclarationList()
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   
   { return new MethodDeclarationList(n0); }
}

Expression Expression() :
{
   NodeChoice n0;
   AndExpression n1;
   LessThanExpression n2;
   PlusExpression n3;
   MinusExpression n4;
   TimesExpression n5;
   ArrayLookupExpression n6;
   ArrayLengthExpression n7;
   MethodCallExpression n8;
   PrimaryExpression n9;

   
}
{
   (
      LOOKAHEAD(PrimaryExpression() <AND>)
      n1=AndExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(PrimaryExpression() <LT>)
      n2=LessThanExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(PrimaryExpression() <PLUS>)
      n3=PlusExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(PrimaryExpression() <MINUS>)
      n4=MinusExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(PrimaryExpression() <TIMES>)
      n5=TimesExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(PrimaryExpression() <LBRACKET>)
      n6=ArrayLookupExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(PrimaryExpression() <DOT> <LENGTH>)
      n7=ArrayLengthExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(PrimaryExpression() <DOT> <IDENTIFIER> <LPAREN>)
      n8=MethodCallExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=PrimaryExpression()
      { n0 = new NodeChoice(n9, 8); }
   )
   
   { return new Expression(n0); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   Expression n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeSequence n30;
   NodeToken n31;
   Token n32;
   Expression n33;
   NodeSequence n34;
   NodeToken n35;
   Token n36;
   Expression n37;
   NodeToken n38;
   Token n39;

   
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<TRUE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<FALSE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<IDENTIFIER> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<THIS> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      LOOKAHEAD(2)
      { n11 = new NodeSequence(6); }
      n13=<NEW> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n15=<INTEGER> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n11.addNode(n14); }
      n17=<LBRACKET> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n11.addNode(n16); }
      n18=Expression()
      { n11.addNode(n18); }
      n20=<RBRACKET> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n11.addNode(n19); }
      { n0 = new NodeChoice(n11, 5); }
   |
      { n21 = new NodeSequence(4); }
      n23=<NEW> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n21.addNode(n22); }
      n25=<IDENTIFIER> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n21.addNode(n24); }
      n27=<LPAREN> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n21.addNode(n26); }
      n29=<RPAREN> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n21.addNode(n28); }
      { n0 = new NodeChoice(n21, 6); }
   |
      { n30 = new NodeSequence(2); }
      n32=<NOT> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n30.addNode(n31); }
      n33=Expression()
      { n30.addNode(n33); }
      { n0 = new NodeChoice(n30, 7); }
   |
      { n34 = new NodeSequence(3); }
      n36=<LPAREN> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n34.addNode(n35); }
      n37=Expression()
      { n34.addNode(n37); }
      n39=<RPAREN> { n38 = JTBToolkit.makeNodeToken(n39); }
      { n34.addNode(n38); }
      { n0 = new NodeChoice(n34, 8); }
   )
   
   { return new PrimaryExpression(n0); }
}

ExpressionList ExpressionList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Expression n2;
   ExpressionRestList n3;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=Expression()
      { n1.addNode(n2); }
      n3=ExpressionRestList()
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   
   { return new ExpressionList(n0); }
}

Type Type() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(4); }
      n3=<INTEGER> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<LBRACKET> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n7=<RBRACKET> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n9=<BOOLEAN> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n0 = new NodeChoice(n8, 1); }
   |
      n11=<INTEGER> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 2); }
   |
      n13=<IDENTIFIER> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n0 = new NodeChoice(n12, 3); }
   )
   
   { return new Type(n0); }
}

FormalList FormalList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Type n2;
   NodeToken n3;
   Token n4;
   FormalRestList n5;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n2=Type()
      { n1.addNode(n2); }
      n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      n5=FormalRestList()
      { n1.addNode(n5); }
      { n0.addNode(n1); }
   )?
   
   { return new FormalList(n0); }
}

FormalRest FormalRest() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1=<COMMA> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new FormalRest(n0,n2,n3); }
}

FormalRestList FormalRestList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   FormalRest n2;
   FormalRestList n3;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=FormalRest()
      { n1.addNode(n2); }
      n3=FormalRestList()
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   
   { return new FormalRestList(n0); }
}

ExpressionRest ExpressionRest() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1=<COMMA> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new ExpressionRest(n0,n2); }
}

ExpressionRestList ExpressionRestList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   ExpressionRest n2;
   ExpressionRestList n3;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=ExpressionRest()
      { n1.addNode(n2); }
      n3=ExpressionRestList()
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   
   { return new ExpressionRestList(n0); }
}

AndExpression AndExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=<AND> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new AndExpression(n0,n1,n3); }
}

LessThanExpression LessThanExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=<LT> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new LessThanExpression(n0,n1,n3); }
}

PlusExpression PlusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=<PLUS> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new PlusExpression(n0,n1,n3); }
}

MinusExpression MinusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=<MINUS> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new MinusExpression(n0,n1,n3); }
}

TimesExpression TimesExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=<TIMES> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new TimesExpression(n0,n1,n3); }
}

ArrayLookupExpression ArrayLookupExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=PrimaryExpression()
   n2=<LBRACKET> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5=<RBRACKET> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArrayLookupExpression(n0,n1,n3,n4); }
}

ArrayLengthExpression ArrayLengthExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=PrimaryExpression()
   n2=<DOT> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<LENGTH> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ArrayLengthExpression(n0,n1,n3); }
}

MethodCallExpression MethodCallExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   ExpressionList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=PrimaryExpression()
   n2=<DOT> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<LPAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=ExpressionList()
   n9=<RPAREN> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new MethodCallExpression(n0,n1,n3,n5,n7,n8); }
}
