//
// Generated by JTB 1.3.2
//

package br.com.seimos.minijava.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> &lt;CLASS&gt;
 * f1 -> &lt;IDENTIFIER&gt;
 * f2 -> ( &lt;EXTENDS&gt; &lt;IDENTIFIER&gt; )?
 * f3 -> &lt;LBRACE&gt;
 * f4 -> VarDeclarationList()
 * f5 -> MethodDeclarationList()
 * f6 -> &lt;RBRACE&gt;
 * </PRE>
 */
public class ClassDeclaration implements Node {
	public NodeToken f0;
	public NodeToken f1;
	public NodeOptional f2;
	public NodeToken f3;
	public VarDeclarationList f4;
	public MethodDeclarationList f5;
	public NodeToken f6;

	public ClassDeclaration(NodeToken n0, NodeToken n1, NodeOptional n2, NodeToken n3, VarDeclarationList n4, MethodDeclarationList n5, NodeToken n6) {
		f0 = n0;
		f1 = n1;
		f2 = n2;
		f3 = n3;
		f4 = n4;
		f5 = n5;
		f6 = n6;
	}

	public ClassDeclaration(NodeToken n0, NodeOptional n1, VarDeclarationList n2, MethodDeclarationList n3) {
		f0 = new NodeToken("class");
		f1 = n0;
		f2 = n1;
		f3 = new NodeToken("{");
		f4 = n2;
		f5 = n3;
		f6 = new NodeToken("}");
	}

	public void accept(br.com.seimos.minijava.visitor.Visitor v) {
		v.visit(this);
	}

	public <R, A> R accept(br.com.seimos.minijava.visitor.GJVisitor<R, A> v, A argu) {
		return v.visit(this, argu);
	}

	public <R> R accept(br.com.seimos.minijava.visitor.GJNoArguVisitor<R> v) {
		return v.visit(this);
	}

	public <A> void accept(br.com.seimos.minijava.visitor.GJVoidVisitor<A> v, A argu) {
		v.visit(this, argu);
	}
}
